:root {
    --hover_shadow: hsl( 0, 100%, 100%);
    --main-bg-color: hsl( 0, 0%, 20%);
    --selected-bg-color: hsl( 0, 0%, var( --bg-selected-lightness ) );
    --selected-color: hsl( 0, 0%, var( --selected-lightness ) );
    --input-bg-color: hsl( 0, 0%, 23%);
    --dark-bg-color: hsl( 0, 0%, 30%);
    --changed-bg-color: hsl(56, 5%, 30%);
    
    --change-detect-color: hsl(45, 100%, 50%);
    --saturation: 50%;
    --lightness: 35%;
    --action-lightness: 70%;
    --font-lightness: 70%;
    --hover-lightness: 100%;
    --bg-hover-lightness: 30%;
    --selected-lightness: 100%;
    --bg-selected-lightness: 40%;
    --operateur_hue: 0;
    --intervenant_hue: 20;
    --maincourante_hue: 40;
    --alarme_hue: 60;
    --rapport_hue: 80;
    --presence_hue: 100;
    --verification_hue: 120;
    --gray: 0%;
    --white_hue: 0;
    --color1: 220;
    --color2: 180;
    --color3: 100;
    --colorAction: 15;
    --context-menu-color: hsla( 0, 0%, 10%, 0.5);
    --main-color: hsl( var( --color1), var( --saturation), var( --lightness));
    --selected-main-color: hsl( var( --color1), var( --saturation), var( --selected-lightness));
}

html {
    height: 100%;
}

body {
    height: 100%;
    background: var( --main-bg-color);
    color: hsl( var( --white_hue), var( --gray), var( --font-lightness));
    color: hsl( 0, 0%, 70%);
    margin: 0px 0px 0px 0px;
}

* {
    font-family: Candara, Verdana, Sans-serif;
    /* border-box indique au navigateur de prendre en compte la bordure et le remplissage dans la valeur définie pour la largeur et la hauteur.
    Autrement dit, si on définit un élément avec une largeur de 100 pixels, ces 100 pixels inclueront la bordure et le remplissage éventuellement
    ajoutés et c'est le contenu de la boîte qui sera compressé pour absorber cette largeur supplémentaire. Cela permet généralement de simplifier
    le dimensionnement des éléments. */
    box-sizing: border-box;
}

select,
input,
textarea {
    background-color: var( --input-bg-color);
    color: hsl( 0, var( --gray), var( --font-lightness));
    resize: none;
}

select,
input,
.bordered,
textarea,
button {
    border: 1px solid hsl( var( --color1), var( --saturation), var( --lightness));
}

button {
    color: hsl( 0, var( --gray), var( --font-lightness));
}

button:hover {
    border: 1px solid hsl( var( --color1), var( --saturation), var( --hover-lightness));
}

button:active {
    background-color: var( --input-bg-color);
}

input:disabled,
textarea:disabled,
button {
    background-color: var( --main-bg-color);
}

.transition_1s {
    transition: border 1s, color 1s, box-shadow 1s, text-shadow 1s;
}

input:hover:enabled,
select:hover:enabled,
textarea:hover:enabled,
button:hover:enabled {
    border: 1px solid hsl( var( --color1), var( --saturation), var( --hover-lightness));
    box-shadow: 0px 0px 5px 0px var(--hover_shadow), 0px 0px 5px 0px var(--hover_shadow) inset;
    transition: box-shadow 1s border 1s;
}


/* Détection des changements */

.borderhalo {
    box-shadow: 0px 0px 5px 0px var(--change-detect-color), 0px 0px 5px 0px var(--change-detect-color) inset;
    border: 1px solid var( --change-detect-color);
    background-color: var( --changed-bg-color );
    z-index: 100
}


/* Customisation des menus contextuels */

.ngx-contextmenu .dropdown-menu {
    /* border: solid 1px chartreuse; */
    background-color: var( --context-menu-color);
    padding: 0px 0px 0px 0px;
    /* border: 1px solid hsl( var( --color1), var( --saturation), var( --lightness)); */
    /* Toujours au dessus: */
    z-index: 100;
}

.ngx-contextmenu li {
    display: block;
    background-color: var( --context-menu-color);
    text-align: left;
}

.ngx-contextmenu li:not(:first-child) {
    border: 1px solid hsl( var( --color1), var( --saturation), var( --lightness));
}

.ngx-contextmenu a {
    color: hsl( 0, var( --gray), var( --font-lightness));
    display: block;
    padding: 0.5em 1em;
    text-decoration: none;
}

.ngx-contextmenu a:hover:not(:first-child) {
    color: hsl( 0, var( --gray), var( --hover-lightness));
    transition: color 1s;
}

.ngx-contextmenu li:hover:not(:first-child) {
    transition: border 1s, color 1s, box-shadow 1s, text-shadow 1s;
    border: 1px solid hsl( var( --color1), var( --saturation), var( --hover-lightness));
    background-color: hsl( 0, var( --gray ), var( --bg-hover-lightness));
}


/* Customisation des scrollbars */

 ::-webkit-scrollbar {
    width: 10px;
}

 ::-webkit-scrollbar-thumb {
    background-color: hsl( var( --color1), var( --saturation), var( --lightness));
    border-color: hsl( var( --color1), var( --saturation), var( --lightness));
    border-width: 1px;
}


/* Customisation des checkboxes */


/* repris de https://www.w3schools.com/howto/howto_css_custom_checkbox.asp  */


/* Customize the label (the container) */

.container {
    display: block;
    position: relative;
    padding-left: 1.5em;
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none
}


/* Hide the browser's default checkbox */

.container input {
    position: absolute;
    opacity: 0
}


/* Create a custom checkbox */

.checkmark {
    position: absolute;
    top: 0;
    left: 0;
    height: 16px;
    width: 16px;
    background-color: #eee;
}


/* On mouse-over, add a grey background color */

.container:hover input~.checkmark {
    background-color: #ccc;
}


/* When the checkbox is checked, add a blue background */

.container input:checked~.checkmark {
    background-color: #ccc;
}


/* Create the checkmark/indicator (hidden when not checked) */

.checkmark:after {
    content: "";
    position: absolute;
    display: none;
}


/* Show the checkmark when checked */

.container input:checked~.checkmark:after {
    display: block;
}


/* Style the checkmark/indicator */

.container .checkmark:after {
    left: 5px;
    top: 2px;
    width: 4px;
    height: 7px;
    border: solid var( --main-color);
    border-width: 0 3px 3px 0;
    -webkit-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    transform: rotate(45deg);
}


